{"version":3,"file":"static/js/450.8d2b461b.chunk.js","mappings":"4NAyBA,UApBgB,WACZ,OAAwCA,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAOV,OANEE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,+FACRC,EAAAA,EAAAA,IAAgBJ,GAAIK,MAAK,SAAAC,GAAG,OAAIP,EAAgBO,EAAIC,QAAxB,IADpB,mFAAH,qDAEbJ,GACD,GAAE,CAACH,KAGJ,wBACCF,EAAaU,KAAI,YAA0B,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3B,OACE,2BACF,0BAAI,WAASD,MACb,uBAAIC,OAFOC,EAAAA,EAAAA,MAId,KAEF,C,+LCrBKC,EAAU,aACVC,EAAW,+BAEXC,GADmB,UAAMD,EAAN,8BAAoCD,GAC9C,qBACTG,EAAU,gBACVC,EAAM,SAEZC,EAAAA,EAAAA,SAAAA,QAAyBJ,EAEzB,IAAMK,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAIC,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,sIAAkC,EAAlC,SACkBN,EAAAA,EAAAA,IAAUH,EAAWI,GADvC,cACCM,EADD,yBAEEA,GAFF,mEAeA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BzB,GAA5B,gGAEgBiB,EAAAA,EAAAA,IAAA,UACdD,EADc,YACJhB,EADI,oBACUY,EADV,mBAEjBM,GAJC,cAEGQ,EAFH,yBAKMA,GALN,gCAQHC,QAAQC,IAAR,MACCC,MAAM,KAAMC,SATV,gFAaA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,0FAAkCC,EAAlC,+BAAyC,EAAzC,kBAEUhB,EAAAA,EAAAA,IAAA,UACRF,EADQ,oBACcH,EADd,iCAC8CoB,EAD9C,iBAC4DC,GACvEf,GAJC,wEAOHW,MAAM,KAAMC,SAPT,iFAWA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA+BlC,GAA/B,gGAEgBmC,MAAM,GAAD,OACnBnB,EADmB,YACThB,EADS,4BACaY,EADb,mBAEtBM,GACAb,MAAK,SAAAmB,GACL,GAAIA,EAASY,GACX,OAAOZ,EAASa,OAElB,MAAM,IAAIC,KACX,IAVE,cAEGZ,EAFH,yBAWIA,GAXJ,gCAaHG,MAAM,4GAbH,gFAiBA,SAAezB,EAAtB,kC,aAAO,O,oBAAA,WAA+BJ,GAA/B,gGAEgBmC,MAAM,GAAD,OACnBnB,EADmB,YACThB,EADS,4BACaY,EADb,mBAEtBM,GACAb,MAAK,SAAAmB,GACL,GAAIA,EAASY,GACX,OAAOZ,EAASa,OAElB,MAAM,IAAIC,KACX,IAVE,cAEGZ,EAFH,yBAWIA,GAXJ,gCAaHG,MAAM,4GAbH,gF,uDC5EA,IAkBIlB,EAAS,eAAC4B,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAC3C,EAAI4C,GAWvD,OARE5C,IAFF4C,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Reviews/reviews.jsx","utils/searchDataMovie.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getMovieReviews } from \"utils/searchDataMovie\";\n\nconst Reviews = () => {\n    const [reviewsMovie, setReviewsMovie] = useState([]);\n    const { id } = useParams();\n    useEffect(() => {\n      const reviews = async () =>\n        await getMovieReviews(id).then(res => setReviewsMovie(res.results));\n      reviews();\n    }, [id]);\n   \n  return (\n    <ul>\n    {reviewsMovie.map(({ author, content }) => {\n      return (\n        <li key={nanoid()}>\n      <h5>Author: {author}</h5>\n      <p>{content}</p>\n    </li>);\n  })}\n  </ul>);\n}\nexport default Reviews;","import axios from 'axios';\n// 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI5OGU5MzBjMmZhNzRjYWVhNjRmMjAyNmNmNzBlYzQxMyIsInN1YiI6IjY0NmQwNWJhZDE4NTcyMDE4MDJlOGYyOSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.gvC078v2ZEDlsUKlhf6XJhVHnGo7gwYMbWV5S3NVSKY';\n\nconst API_KEY = 'k_yjb6zjrs';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst Most_Popular_Movies = `${BASE_URL}/MostPopularMovies/${API_KEY}`;\nconst TREND_URL = `/trending/all/day`;\nconst SEARCH_URL = `/search/movie`;\nconst ID_URL = `/movie`;\n\naxios.defaults.baseURL = BASE_URL; \n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI5OGU5MzBjMmZhNzRjYWVhNjRmMjAyNmNmNzBlYzQxMyIsInN1YiI6IjY0NmQwNWJhZDE4NTcyMDE4MDJlOGYyOSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.gvC078v2ZEDlsUKlhf6XJhVHnGo7gwYMbWV5S3NVSKY',\n  },\n};\n\nexport async function trendMovies(page = 1) {\n  const response = await axios.get(TREND_URL, options);\n  return response\n\n}\n\nexport async function mostPopularMovies(page = 1) {\n  return await fetch(Most_Popular_Movies)\n    .then(response => {\n      console.log(response)\n      return response.json();\n    })\n    .catch(error => console.log(error));\n}\n\nexport async function getMovieById(id) {\n  try {\n    const data = await axios.get(\n      `${ID_URL}/${id}?api_key=${API_KEY}&language=en-US`,\n      options )\n      return data;\n    \n  } catch (error) {\n    console.log(error)\n     alert(error.message);\n  }\n}\n\nexport async function searchMovie(query, page = 1) {\n  try {\n    return await axios.get(\n      `${SEARCH_URL}?api_key=${API_KEY}&language=en-US&query=${query}&page=${page}`,\n      options\n    )\n  } catch (error) {\n    alert(error.message);\n  }\n}\n\nexport async function getMovieCredits(id) {\n  try {\n    const data = await fetch(\n      `${ID_URL}/${id}/credits?api_key=${API_KEY}&language=en-US`,\n      options\n    ).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error();\n    });\n    return data;\n  } catch (error) {\n    alert('Тут зовсім порожньо');\n  }\n}\n\nexport async function getMovieReviews(id) {\n  try {\n    const data = await fetch(\n      `${ID_URL}/${id}/reviews?api_key=${API_KEY}&language=en-US`,\n      options\n    ).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error();\n    });\n    return data;\n  } catch (error) {\n    alert('Тут зовсім порожньо');\n  }\n}\n// return Promise.reject(new Error(`За запитом ${query} нічого не знайдено`));\n\n//======== Інший АРІ для отримання рейтингу===========\n\n// const API_KEY = '98e930c2fa74caea64f2026cf70ec413';\n// const BASE_URL = 'https://imdb-api.com/en/API';\n//  const optionsAxios = {\n//    method: 'GET',\n//     url: 'http://www.omdbapi.com/?apikey=92a2488e',\n//    url: 'http://www.omdbapi.com/?apikey=92a2488e&s=t&page=2',\n//    params: { country: 'UA' },\n//    headers: {\n//      'X-RapidAPI-Key': '6d6fc46c1amshc0b8f4783759597p10d698jsna0b62de4f768',\n//      'X-RapidAPI-Host': 'imdb188.p.rapidapi.com',\n//    },\n//  };\n// export async function getFanFavorites() {\n// try {\n//   const response = await axios.request(optionsAxios);\n//   // return response;\n//   console.log(response);\n// } catch (error) {\n//   console.error(error);\n// }  \n// }","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","reviewsMovie","setReviewsMovie","id","useParams","useEffect","reviews","getMovieReviews","then","res","results","map","author","content","nanoid","API_KEY","BASE_URL","TREND_URL","SEARCH_URL","ID_URL","axios","options","method","headers","accept","Authorization","trendMovies","response","getMovieById","data","console","log","alert","message","searchMovie","query","page","getMovieCredits","fetch","ok","json","Error","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}